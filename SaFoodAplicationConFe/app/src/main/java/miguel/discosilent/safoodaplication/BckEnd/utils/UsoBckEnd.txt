// Configuración inicial para cargar y restaurar el token de autenticación
Config.loadAuthToken(this); // Cargar el token almacenado previamente
Config.restoreAuthToken(this); // Restaurar el token al predeterminado de la aplicacion 

// Ejemplo de actualización del token de autenticación con un nuevo JWT
String newJwtToken = "eyJhbGciOiJIUzI1NiIsImtpZCI6Ik5KaVlRN3JWR1pzZlhDekEiLCJ0eXAiOiJKV1QifQ..."
Config.updateAuthToken(this, newJwtToken);

// Verificar que el token se haya actualizado correctamente
String currentToken = Config.getAuthToken(this); // Recuperar el token actual
System.out.println("Token actualizado: " + currentToken);


// **Ejemplos de Uso para Obtener Datos desde el Backend**

// 1. Obtener todos los restaurantes de un usuario
val restaurantRepository = RestaurantRepository()
restaurantRepository.fetchRestaurantsByOwner(
    ownerId = "97806ace-eea2-4c16-97ec-7e76bd8a1f84", // UUID
    onSuccess = { restaurants ->
        Log.d("RestaurantLog", "Restaurantes obtenidos: ${restaurants.size}")
        restaurants.forEach { restaurant ->
            Log.d("RestaurantLog", "Nombre: ${restaurant.name}, Ubicación: ${restaurant.location}")
        }
    },
    onError = { error ->
        Log.e("RestaurantLog", "Error al obtener los restaurantes: $error")
    }
)

// 2. Obtener todas las cartas de un restaurante
val cartaRepository = CartaRepository()
cartaRepository.fetchCartaByRestaurant(
    restaurantId = "7",
    onSuccess = { cartas ->
        Log.d("CartaLog", "Cartas obtenidas: $cartas")
    },
    onError = { errorMessage ->
        Log.e("CartaLog", "Error al obtener las cartas: $errorMessage")
    }
)

// 3. Obtener los platos de una carta
val plateRepository = PlateRepository()
plateRepository.fetchPlatesByCart(
    cartId = "10",
    onSuccess = { plates ->
        Log.d("PlateLog", "Platos obtenidos: $plates")
    },
    onError = { errorMessage ->
        Log.e("PlateLog", "Error al obtener los platos: $errorMessage")
    }
)

// 4. Obtener información de un plato por su ID
plateRepository.fetchPlateById(
    plateId = "14",
    onSuccess = { plate ->
        Log.d("PlateRepository", "Nombre del plato: ${plate.name}")
        Log.d("PlateRepository", "Descripción: ${plate.description}")
        Log.d("PlateRepository", "Precio: ${plate.price}")
    },
    onError = { errorMessage ->
        Log.e("PlateRepository", "Error: $errorMessage")
    }
)

// 5. Obtener todas las calificaciones de un usuario
val rateRepository = RateRepository()
rateRepository.fetchRatesByUserId(
    userId = "97806ace-eea2-4c16-97ec-7e76bd8a1f84",
    onSuccess = { rates ->
        Log.d("RateRepository", "Valoraciones obtenidas exitosamente para el usuario")
        rates.forEach { rate ->
            Log.d("RateRepository", "Puntaje: ${rate.points}, Descripción: ${rate.description}")
        }
    },
    onError = { errorMessage ->
        Log.e("RateRepository", "Error: $errorMessage")
    }
)

// 6. Obtener información de un restaurante por su ID
restaurantRepository.fetchRestaurantById(
    restaurantId = "8",
    onSuccess = { restaurant ->
        Log.d("RestaurantRepository", "Nombre del restaurante: ${restaurant.name}")
        Log.d("RestaurantRepository", "Descripción: ${restaurant.description}")
        Log.d("RestaurantRepository", "Ubicación: ${restaurant.location}")
    },
    onError = { errorMessage ->
        Log.e("RestaurantRepository", "Error: $errorMessage")
    }
)

// **Ejemplos para el Login**

// 1. Obtener todos los usuarios
val userRepository = UserRepository()
userRepository.fetchUsers(
    onSuccess = { users ->
        users.forEach { user ->
            Log.d("USER_DATA", "ID: ${user.user_uid}, Name: ${user.username}")
        }
    },
    onError = { error ->
        Toast.makeText(this, "Error: $error", Toast.LENGTH_LONG).show()
        Log.d("USER_DATA", "Error: $error")
    }
)

// 2. Crear un nuevo usuario
val profileImage = "https://example.com/profile.jpg"
val typeUser = "admin"
val username = "newUser123"
userRepository.createUser(
    profileImage = profileImage,
    typeUser = typeUser,
    username = username,
    onSuccess = { message ->
        Toast.makeText(this, message, Toast.LENGTH_LONG).show()
    },
    onError = { error ->
        Toast.makeText(this, error, Toast.LENGTH_LONG).show()
    }
)

// **Ejemplos de Creación de Objetos**

// 1. Crear un restaurante
val newRestaurant = RestaurantRequest(
    name = "Restaurante El Buen Sabor",
    location = "Calle Ficticia 123, Ciudad Ejemplo",
    image_of_local = "https://ejemplo.com/imagen_restaurante.jpg",
    contact_number = "+34 123 456 789",
    horario = "Lunes a Viernes, 9:00 AM - 10:00 PM",
    category = "Restaurante",
    description = "Un restaurante que ofrece comida tradicional con un toque moderno.",
    state = "Activo",
    coordinates = "40.7128, -74.0060"
)
restaurantRepository.createRestaurant(
    newRestaurant,
    onSuccess = {
        Log.e("RestaurantLog", "Restaurante creado con éxito")
    },
    onError = { errorMessage ->
        Log.e("RestaurantLog", "Error al crear restaurante: $errorMessage")
    }
)

// 2. Crear una carta
val cartaRequest = CartaRequest(
    type = "Comida Mexicana",
    description = "Ofrecemos una variedad de platillos tradicionales mexicanos, preparados con ingredientes frescos y de alta calidad.",
    rest_cart = "15"
)
cartaRepository.createCarta(
    cartaRequest,
    onSuccess = {
        println("Carta creada con éxito")
    },
    onError = { error ->
        println("Error al crear la carta: $error")
    }
)

// 3. Crear un plato
val plateRequest = PlateRequest(
    name = "Tacos al Pastor",
    description = "Tacos tradicionales mexicanos con carne de cerdo marinada y servidos con piña, cebolla y cilantro.",
    price = 50.00,
    available = true,
    image = "https://ejemplo.com/tacos_al_pastor.jpg",
    cart_id = "12"
)
plateRepository.createPlate(
    plateRequest,
    onSuccess = {
        println("Plato creado con éxito")
    },
    onError = { error ->
        println("Error al crear el plato: $error")
    }
)

// 4. Crear una calificación (Rate)
val rateRequest = RateRequest(
    points = 3,
    description = "Puntos acumulados por la compra de platillos en el restaurante. Pueden canjearse por descuentos o productos gratis.",
    restaurant_id = "14"
)
rateRepository.createRate(
    rateRequest,
    onSuccess = {
        println("Rate creado con éxito")
    },
    onError = { error ->
        println("Error al crear el rate: $error")
    }
)
